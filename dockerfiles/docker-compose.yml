version: "3.9"

services:
  db:
    image: postgres:16-alpine
    container_name: pgsql
    restart: always
    stdin_open: true
    volumes:
      - pgdata:/var/lib/postgresql/data/
      - ../db_schema.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_NAME}
    tty: true
    ports:
      - ${POSTGRES_EXTERNAL_PORT}:5432/tcp
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  backend:
    build:
      context: ..
      dockerfile: ./dockerfiles/Dockerfile.microservice
    container_name: fastapi
    restart: always
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - app-network

  frontend:
    build:
      context: ..
      dockerfile: ./dockerfiles/Dockerfile.application
    container_name: nextjs
    restart: always
    volumes:
      - ./invoice-parsing/images:/app/images
      - ./invoice-parsing/uploads:/app/uploads
    depends_on:
      backend:
        condition: service_started
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://backend:8000
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB_NAME}
    ports:
      - "3000:3000"
    networks:
      - app-network

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge
